library(grf)
df = read.csv('p2p.csv')
for (i in 23:26){
print(colnames(df)[i])
print(table(df[,i]))
}
for (i in 23:26){
print(colnames(df)[i])
print(table(df[,i]))
print()
}
for (i in 23:26){
print(colnames(df)[i])
print(table(df[,i]))
print('')
}
id_train = sort(sample(nrow(data), nrow(data)*.7))
id_train
id_train = sort(sample(nrow(df), nrow(df)*.7))
id_train
df[id_train, 'status']
table(df[id_train, 'status'])
table(df
)
table(df$status)
id_train = sort(sample(nrow(df), nrow(df)*.1))
table(df[id_train, 'status'])
id_train = sort(sample(nrow(df), nrow(df)*.1))
id_train
setdiff(1:nrow(df), id_train)
length(setdiff(1:nrow(df), id_train))
length(id_train)
13541+1504
nrow(df)
df_train = df[id_train, ]
df_test  = df[setdiff(1:nrow(df), id_train), ]
Y = subset(df_train, select =  c(status))[[1]]
X = subset(df_train, select = -c(status, ratio036))
W = subset(df_train, select =  c(ratio036))[[1]]
tau.forest <- causal_forest(X, Y, W)
tau.forest
tau.forest$variance.estimates
tau.forest$predictions
tau.forest$debiased.error
tau.forest$Y.hat
tau.forest$Y.hat -Y
tau.forest$Y.hat -
tau.forest$Y.hat
Y
tau.forest$Y.hat
tau.forest$Y.hat > 0.5
1.0*(tau.forest$Y.hat > 0.5)
1.0*(tau.forest$Y.hat > 0.5) - Y
sum(abs(1.0*(tau.forest$Y.hat > 0.5) - Y))
plot(tau.forest)
Y_test = subset(df_test, select =  c(status))[[1]]
X_test = subset(df_test, select = -c(status, ratio036))
W_test = subset(df_test, select =  c(ratio036))[[1]]
tau.hat <- predict(tau.forest, X_test)
tau.hat
tau.hat <- predict(tau.forest, X_test, W_test)
tau.hat <- predict(tau.forest, X_test)
tau.hat
tau.hat > 0.5
tau.hat > 0.5 - Y_test
1.0*(tau.hat > 0.5)
tau.hat > 0.5 == Y_test
(tau.hat > 0.5) == Y_test
as.integer(Y_test)
Y_test
(Y_test == TRUE)
(tau.hat > 0.5) == (Y_test == TRUE)
1.0*(tau.hat > 0.5)
(tau.hat > 0.5)
Y_test
(Y_test == 1)
(tau.hat > 0.5) == (Y_test == 1)
FALSE == FALSE
(tau.hat > 0.5)
(Y_test == 1)
mean((tau.hat > 0.5) == (Y_test == 1))
mean((tau.hat > 0.6) == (Y_test == 1))
mean((tau.hat > 0.8) == (Y_test == 1))
mean((tau.hat > 0.9) == (Y_test == 1))
mean((tau.hat > 0.99) == (Y_test == 1))
tau.hat
max(tau.hat)
library(pROC)
install.packages('pROC')
tau.hat <- predict(tau.forest)
tau.hat
tau.forest$predictions
tau.hat <- predict(tau.forest, X_test)
tau.hat
tau.hat > 0.5
pROC::auc(tau.hat > 0.5, Y_test == 1)
pROC::auc(c(tau.hat > 0.5, Y_test == 1))
pROC::auc(Y_test, tau.hat > 0.5)
pROC::auc(response = Y_test, 1.0 * (tau.hat > 0.5))
Y_test
1.0 * (tau.hat > 0.5)
tau.hat
tau.hat[[1]]
pROC::auc(response = Y_test, 1.0 * (tau.hat[[1]] > 0.5))
roc = pROC::auc(response = Y_test, 1.0 * (tau.hat[[1]] > 0.5))
roc
auc(roc)
pROC::auc(roc)
roc = pROC::auc(response = Y_test, 1.0 * (tau.hat[[1]] > 0.5), auc=FALSE)
roc = pROC::auc(response = Y_test, predictor = 1.0 * (tau.hat[[1]] > 0.5), auc=FALSE)
roc = pROC::auc(response = Y_test, predictor = 1.0 * (tau.hat[[1]] > 0.5))
c(Y_test)
roc = pROC::auc(1.0 * (tau.hat[[1]] > 0.5), response = Y_test)
cbin(1.0 * (tau.hat[[1]] > 0.5), Y_test)
cbind(1.0 * (tau.hat[[1]] > 0.5), Y_test)
roc = pROC::auc(response = Y_test, predictor = 1.0 * (tau.hat[[1]] > 0.5))
data(aSAH)
pROC::aSAH
aSAH = pROC::aSAH
roc(aSAH$outcome, aSAH$s100b,
levels=c("Good", "Poor"))
pROC::roc(aSAH$outcome, aSAH$s100b,
levels=c("Good", "Poor"))
aSAH$outcome
aSAH$s100b
roc = pROC::auc(response = Y_test, predictor = tau.hat[[1]] )
roc
pROC::auc(roc)
roc
roc = pROC::auc(response = Y_test, predictor = tau.hat[[1]], auc=FALSE)
roc = pROC::roc(response = Y_test, predictor = tau.hat[[1]])
pROC::auc(roc)
plot(roc)
tau.hat[[1]]
roc = pROC::roc(response = Y_test, predictor = tau.hat)
roc = pROC::roc(response = Y_test, predictor = tau.hat[[1]])
roc = pROC::roc(response = Y_test, predictor = tau.hat[[1]])
plot(roc)
roc = pROC::roc(response = Y_test, predictor = tau.hat[[1]])
plot(roc)
pROC::auc(roc)
roc = pROC::roc(response = Y_test, predictor = 1-tau.hat[[1]])
plot(roc)
roc = pROC::roc(response = Y_test, predictor = 1-tau.hat[[1]])
plot(roc)
pROC::auc(roc)
1-tau.hat[[1]]
roc = pROC::roc(response = Y_test, predictor = 0.5-tau.hat[[1]])
plot(roc)
roc = pROC::roc(response = Y_test, predictor = 0.5-tau.hat[[1]])
plot(roc)
pROC::auc(roc)
roc = pROC::roc(response = Y_test, predictor = 1-2*tau.hat[[1]])
plot(roc)
pROC::auc(roc)
roc = pROC::roc(response = Y_test, predictor = 1-tau.hat[[1]]**2)
plot(roc)
pROC::auc(roc)
roc = pROC::roc(response = Y_test, predictor = 1-tau.hat[[1]]**2)
plot(roc)
pROC::auc(roc)
roc = pROC::roc(response = Y_test, predictor = tau.hat[[1]])
plot(roc)
predict(tau.forest, X)
roc = pROC::roc(response = Y, predictor = predict(tau.forest, X)[[1]])
roc
plot(roc)
tau.forest(tau.forest)
predict(tau.forest, X, W)
tau.forest <- causal_forest(X, Y, W, tune.parameters = 'all')
roc = pROC::roc(response = Y, predictor = predict(tau.forest, X)[[1]], )
plot(roc)
pROC::auc(roc)
tau.hat <- predict(tau.forest, X_test)
roc = pROC::roc(response = Y_test, predictor = tau.hat[[1]])
roc = pROC::roc(response = Y, predictor = predict(tau.forest, X)[[1]], )
tau.forest <- causal_forest(X, Y, W, tune.parameters = 'all')
roc = pROC::roc(response = Y, predictor = predict(tau.forest, X)[[1]], )
plot(roc)
pROC::auc(roc)
roc = pROC::roc(response = Y, predictor = predict(tau.forest, X)[[1]], )
plot(roc)
pROC::auc(roc)
roc = pROC::roc(response = Y_test, predictor = predict(tau.forest, X_test)[[1]])
plot(roc)
pROC::auc(roc)
roc = pROC::roc(response = Y, predictor = predict(tau.forest, X)[[1]], )
plot(roc)
pROC::auc(roc)
roc = pROC::roc(response = Y_test, predictor = predict(tau.forest, X_test)[[1]])
plot(roc)
pROC::auc(roc)
id_train = sort(sample(nrow(df), nrow(df)*.5))
length(setdiff(1:nrow(df), id_train))
df_train = df[id_train, ]
df_test  = df[setdiff(1:nrow(df), id_train), ]
Y = subset(df_train, select =  c(status))[[1]]
X = subset(df_train, select = -c(status, ratio036))
W = subset(df_train, select =  c(ratio036))[[1]]
Y_test = subset(df_test, select =  c(status))[[1]]
X_test = subset(df_test, select = -c(status, ratio036))
W_test = subset(df_test, select =  c(ratio036))[[1]]
tau.forest <- causal_forest(X, Y, W, tune.parameters = 'all')
roc = pROC::roc(response = Y, predictor = predict(tau.forest, X)[[1]], )
plot(roc)
pROC::auc(roc)
roc = pROC::roc(response = Y_test, predictor = predict(tau.forest, X_test)[[1]])
plot(roc)
pROC::auc(roc)
tau.forest.quantile = grf::quantile_forest(
X, Y, W, tune.parameters = 'all', quantiles = c(0.025, 0.25, 0.5, 0.75, 0.975))
tau.forest.quantile = grf::quantile_forest(
X, Y, W, quantiles = c(0.025, 0.25, 0.5, 0.75, 0.975))
tau.forest.quantile = grf::quantile_forest(
X, Y, quantiles = c(0.025, 0.25, 0.5, 0.75, 0.975))
df$X
tau.forest.quantile = grf::quantile_forest(
X, Y, quantiles = c(0.025, 0.25, 0.5, 0.75, 0.975))
tau.forest.quantile
predict(tau.forest.quantile, X)
predict(tau.forest.quantile, X)[[1]]
roc = apply(predict(tau.forest.quantile, X), 2, function(x){
pROC::roc(response = Y, predictor = x)
})
roc
plot(roc[[1]])
plot(roc[[2]])
plot(roc[[3]])
roc = apply(predict(tau.forest.quantile, X_test), 2, function(x){
pROC::roc(response = Y, predictor = x)
})
roc = apply(predict(tau.forest.quantile, X_test), 2, function(x){
pROC::roc(response = Y_test, predictor = x)
})
plot(roc[[3]])
roc
plot(roc[[3]])
plot(roc[[1]])
tau.forest <- regression_forest(X, Y, tune.parameters = 'all')
predict(tau.forest, X_test)[[1]]
roc = pROC::roc(response = Y_test, predictor = predict(tau.forest, X_test)[[1]])
plot(roc)
pROC::auc(roc)
tau.forest
tau.forest$clusters
tau.forest$has.missing.values
colnames(X)
Y = subset(df_train, select =  c(status))[[1]]
X = subset(df_train, select = -c(status, ratio036, X))
W = subset(df_train, select =  c(ratio036))[[1]]
Y_test = subset(df_test, select =  c(status))[[1]]
X_test = subset(df_test, select = -c(status, ratio036, X))
W_test = subset(df_test, select =  c(ratio036))[[1]]
tau.forest <- causal_forest(X, Y, W, tune.parameters = 'all')
# tau.forest.quantile = grf::quantile_forest(
#   X, Y, quantiles = c(0.025, 0.25, 0.5, 0.75, 0.975))
tau.forest <- regression_forest(X, Y, tune.parameters = 'all')
tau.forest
df = read.csv('p2p.csv')
head(df)
df = read.csv('p2p.csv')
df$X = NULL
df$X
df = read.csv('p2p.csv')
df$X = NULL
for (i in 22:25){
print(colnames(df)[i])
print(table(df[,i]))
print('')
}
colnames(df)
cor(df[,c('status', colnames(df)[22])])
cor(df[,c('status', colnames(df)[23])])
cor(df[,c('status', colnames(df)[24])])
cor(df[,c('status', colnames(df)[25])])
cor(df[,c('status', colnames(df)[26])])
cor(df)
cor(df)$status
cor(df)[, 'status']
for (i in 22:25){
print(colnames(df)[i])
print(table(df[,i]))
print('')
}
summary(df)
t(summary(df))
summary(df)
as.data.frame(summary(df))
summary(df)
cor(df)[, 'status']
